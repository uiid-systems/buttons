@import "./tokens.css" layer(toretto.tokens.button);

@layer toretto.buttons {
  [data-toretto="button"] {
    all: unset;
    cursor: pointer;
    display: inline-grid;
    border-radius: var(--button-border-radius);
    transition: all 50ms ease-in-out;

    & > * {
      grid-area: 1 / 1;
      place-content: center;
      text-align: center;
    }

    &:not([aria-disabled="true"]):hover {
      scale: var(--button-scale-hover);
    }

    &:not([aria-disabled="true"]):active {
      scale: var(--button-scale-active);
    }

    &:focus {
      outline-style: solid;
      outline-width: 2px;
      outline-offset: 2px;
    }

    &:not([data-variant]) {
      background-color: var(--button-color-background);
      color: var(--button-color-foreground);
      &:focus {
        outline-color: var(--button-color-background);
      }
      &:not([aria-disabled="true"]):hover,
      &:not([aria-disabled="true"]):focus {
        background-color: var(--button-color-background-hover);
      }
      &:not([aria-disabled="true"]):active {
        background-color: var(--button-color-background-active);
      }
    }

    &:where([data-variant="primary"]) {
      background-color: var(--button-color-background-primary);
      color: var(--button-color-foreground-primary);
      &:focus {
        outline-color: var(--button-color-background-primary);
      }
      &:not([aria-disabled="true"]):hover,
      &:not([aria-disabled="true"]):focus {
        background-color: var(--button-color-background-primary-hover);
      }
      &:not([aria-disabled="true"]):active {
        background-color: var(--button-color-background-primary-active);
      }
    }

    &:where([data-variant="secondary"]) {
      background-color: var(--button-color-background-secondary);
      color: var(--button-color-foreground-secondary);
      &:focus {
        outline-color: var(--button-color-background-secondary);
      }
      &:not([aria-disabled="true"]):hover,
      &:not([aria-disabled="true"]):focus {
        background-color: var(--button-color-background-secondary-hover);
      }
      &:not([aria-disabled="true"]):active {
        background-color: var(--button-color-background-secondary-active);
      }
    }

    &:where([data-variant="tertiary"]) {
      background-color: var(--button-color-background-tertiary);
      color: var(--button-color-foreground-tertiary);
      &:focus {
        outline-color: var(--button-color-background-tertiary);
      }
      &:not([aria-disabled="true"]) {
        &:hover,
        &:focus {
          background-color: var(--button-color-background-tertiary-hover);
        }
        &:active {
          background-color: var(--button-color-background-tertiary-active);
        }
      }
    }

    &:where([aria-disabled="true"]) {
      opacity: var(--button-disabled-opacity);
      cursor: not-allowed;
    }

    &:where([data-size="sm"]) {
      height: var(--button-size-sm-height);
      padding-inline: var(--button-size-sm-padding-x);
      font-size: var(--button-size-sm-font-size);
    }

    &:where([data-size="md"]) {
      height: var(--button-size-md-height);
      padding-inline: var(--button-size-md-padding-x);
      font-size: var(--button-size-md-font-size);
    }

    &:where([data-size="lg"]) {
      height: var(--button-size-lg-height);
      padding-inline: var(--button-size-lg-padding-x);
      font-size: var(--button-size-lg-font-size);
    }
  }

  [data-toretto="button-loading"] {
    visibility: visible;
    &[aria-hidden="true"] {
      visibility: hidden;
    }
  }

  [data-toretto="button-content"] {
    display: flex;
    align-items: center;
    gap: 1rem;
    visibility: visible;
    &[aria-hidden="true"] {
      visibility: hidden;
    }
  }
}
